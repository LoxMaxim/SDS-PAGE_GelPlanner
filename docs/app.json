[{"name":"app.R","content":"\r\npackages <- c(\"ggplot2\", \"shiny\", \"sortable\", \"DT\")\r\n\r\n# Workaround for Chromium Issue 468227\r\ndownloadButton <- function(...) {\r\n  tag <- shiny::downloadButton(...)\r\n  tag$attribs$download <- NULL\r\n  tag\r\n}\r\n\r\n# Install packages not yet installed\r\ninstalled_packages <- packages %in% rownames(installed.packages())\r\nif (any(installed_packages == FALSE)) {\r\n  install.packages(packages[!installed_packages])\r\n}\r\n\r\nlibrary(shiny)\r\nlibrary(ggplot2)\r\nlibrary(sortable)\r\nlibrary(DT)\r\n\r\n# Define UI\r\nui <- fluidPage(\r\n  titlePanel(\"SDS-PAGE Gel Layout Planner\"),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      selectInput(\"lane_count\", \"Number of Wells:\", choices = c(10, 15, 26), selected = 10),\r\n      uiOutput(\"sample_inputs\"),\r\n      downloadButton(\"download_plot\", \"Download Gel Layout\")\r\n    ),\r\n    \r\n    mainPanel(\r\n      plotOutput(\"gel_plot\", height = \"800px\", width = \"100%\")\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  \r\n  # Generate dynamic input UI based on lane count\r\n  output$sample_inputs <- renderUI({\r\n    n <- as.numeric(input$lane_count)\r\n    \r\n    # Create tabs dynamically based on the lane count\r\n    lane_tabs <- lapply(1:n, function(i) {\r\n      tabPanel(\r\n        title = paste(\"Lane\", i),\r\n        wellPanel(\r\n          textInput(paste0(\"sample_\", i), paste(\"Lane\", i, \"Label\"), value = paste(\"Sample\", i)),\r\n          selectInput(paste0(\"type_\", i), \"Type\", choices = c(\"Sample\", \"Ladder\", \"Control\", \"Blank\"), selected = \"Sample\"),\r\n          numericInput(paste0(\"volume_\", i), \"Volume (ÂµL)\", value = NA, min = 0, step = 1),\r\n          checkboxInput(paste0(\"highlight_\", i), \"Highlight this lane\", value = FALSE)\r\n        )\r\n      )\r\n    })\r\n    \r\n    # Wrap the tabs in a tabsetPanel\r\n    do.call(tabsetPanel, lane_tabs)\r\n  })\r\n  \r\n  # Reactive data frame to gather sample info\r\n  sample_data <- reactive({\r\n    n <- as.numeric(input$lane_count)\r\n    data.frame(\r\n      lane = factor(1:n, levels = n:1),  # flip vertically\r\n      label = sapply(1:n, function(i) input[[paste0(\"sample_\", i)]]),\r\n      type = sapply(1:n, function(i) input[[paste0(\"type_\", i)]]),\r\n      volume = sapply(1:n, function(i) input[[paste0(\"volume_\", i)]]),\r\n      highlight = sapply(1:n, function(i) input[[paste0(\"highlight_\", i)]])\r\n    )\r\n  })\r\n  \r\n  # Function to assign fill color based on sample type\r\n  type_colors <- c(\r\n    \"Sample\" = \"skyblue\",\r\n    \"Ladder\" = \"orange\",\r\n    \"Control\" = \"forestgreen\",\r\n    \"Blank\" = \"grey80\"\r\n  )\r\n  \r\n  # Function to generate the plot (used both in renderPlot and downloadHandler)\r\n  generate_plot <- function(df) {\r\n    df$fill_color <- c(\"skyblue\", \"orange\", \"forestgreen\", \"grey80\")[match(df$type, c(\"Sample\", \"Ladder\", \"Control\", \"Blank\"))]\r\n    df$border_color <- ifelse(df$highlight, \"red\", \"black\")\r\n    \r\n    n_lanes <- as.numeric(input$lane_count)\r\n    if (n_lanes == 10) {\r\n      ratio_value <- 0.4\r\n    } else if (n_lanes == 15) {\r\n      ratio_value <- 0.4\r\n    } else if (n_lanes == 26) {\r\n      ratio_value <- 0.2\r\n    } else {\r\n      ratio_value <- 0.3\r\n    }\r\n    \r\n    ggplot(df, aes(y = as.numeric(lane), x = 1)) +\r\n      geom_tile(aes(fill = fill_color, color = border_color), width = 5, height = 0.8, linewidth = 1.5) +\r\n      geom_text(aes(label = paste0(label,\r\n                                   ifelse(!is.na(volume), paste0(\" (\", volume, \" ÂµL)\"), \"\"))),\r\n                color = \"black\", size = 5, fontface = \"bold\") +\r\n      scale_fill_identity() +\r\n      scale_color_identity() +\r\n      coord_fixed(ratio = ratio_value) +\r\n      theme_void() +\r\n      theme(\r\n        panel.border = element_rect(color = NA, fill = NA),\r\n        plot.background = element_rect(fill = \"#C1CDCD\"),\r\n        panel.background = element_rect(fill = \"#C1CDCD\"),\r\n        plot.title = element_text(color = \"black\", hjust = 0.5, face = \"bold\", size = 16)\r\n      ) +\r\n      ggtitle(\"SDS-PAGE Gel Layout\")\r\n  }\r\n  \r\n  # Render the gel layout plot\r\n  output$gel_plot <- renderPlot({\r\n    df <- sample_data()  # Get the latest sample data\r\n    generate_plot(df)\r\n  })\r\n  \r\n  # Allow downloading the plot\r\n  output$download_plot <- downloadHandler(\r\n    filename = function() {\r\n      paste0(\"sds_page_layout_\", Sys.Date(), \".png\")\r\n    },\r\n    content = function(file) {\r\n      df <- sample_data()  # Get the latest sample data\r\n      p <- generate_plot(df)  # Generate the same plot\r\n      ggsave(file, plot = p, width = 10, height = 5, units = \"in\", dpi = 600)\r\n    }\r\n  )\r\n}\r\n\r\nshinyApp(ui, server)\r\n\r\n","type":"text"}]
